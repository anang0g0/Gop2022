# GoppaDecorder

20191218（開始）- 20210419

１．プログラム実行に当たって

実行しようとするとスタックオーバーフローするので、

ulimit -s unlimited

を必ず実行してください。

コードのメンテナンス作業に移行します。（20210419）  


たくさんのアドバイスをいただいた産業技術総合研究所の古原和邦様には、特別な感謝の気持とお礼を申し上げる。

---


# マニュアル作成中

OAEP実装してないです。

https://forest.watch.impress.co.jp/docs/news/1288355.html


# 設定ファイルと定義体の設定  
global.h：符号のパラメータを決めます。  
chash.c ：定義体を指定します。  
ecole.c ：定義体の中身を作ります。(ecole normal basis lol)  

[参考サイト] (https://www.cayrel.net/?-Code-based-cryptosystems- )

# 20211019

何種類もあるgcd関数を１つに統一したいのだが、そもそもなんで同じユークリッド互除法のはずなのに出力が違うのかよくわからない。

本に載ってたのもあるし、自分で１から書いた関数もある。

とにかくこのひどいプログラムが動いているように見えるのが偶然の産物としか思えない。

既約性判定のben_or関数の出力をsageで確認すると正しいと思うけど、今まで１つも例外を見つけていない。

sageが間違えるとも思えないので、やはりben_orは正しいはずなのだが、なぜgcdの汚いコードが正しくて、agcdのきれいなコードが間違っているのかわからない。

比べてみたんですが、呼び出される関数ごとに終了条件が異なるので、引数で渡せば１つにできるのかなという感じです。

とりあえずagcdはgcdにマージして削除しました。

# 20211016

ben_orの既約性判定テストのバグを修正しました。(Patterson.c)

# 20211013

メンテナンスを少しずつ進めます。

リードソロモン符号の偶数行を省略するところだけ通常のパラメータと違うので、別関数にした。

リードソロモン符号だと通常のゴッパ符号の半分のサイズで公開鍵を作ることができます。

ドキがムネムネ：[https://decodingchallenge.org/syndrome]

# 20210922

No Rest for the Wicked
